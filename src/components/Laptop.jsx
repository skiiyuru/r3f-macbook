import { a as three } from "@react-spring/three"
import {
  Environment,
  Html,
  MeshPortalMaterial,
  RoundedBox,
  useGLTF,
} from "@react-three/drei"
import { useFrame } from "@react-three/fiber"
import { useControls } from "leva"
import React, { useEffect, useRef, useState } from "react"
import * as THREE from "three"
import ScreenPortal from "./ScreenPortal"

export default function Laptop({ open, hinge, ...props }) {
  const group = useRef()

  // Load model
  const { nodes, materials } = useGLTF("./mac-draco.glb")

  // Take care of cursor state on hover
  const [hovered, setHovered] = useState(false)

  useEffect(
    () => void (document.body.style.cursor = hovered ? "pointer" : "auto"),
    [hovered]
  )

  // const frameDebug = useControls({
  //   x: { value: 1, min: 0, max: 10, step: 0.01 },
  //   y: { value: 3.45, min: 0, max: 10, step: 0.01 },
  //   z: { value: -2, min: -10, max: 10, step: 0.01 },
  //   distanceFactor: { value: 3.7, min: -10, max: 10, step: 0.01 },
  // })

  // Make it float in the air when it's opened
  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.x = THREE.MathUtils.lerp(
      group.current.rotation.x,
      open ? Math.cos(t / 10) / 10 + 0.25 : 0,
      0.1
    )
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      open ? Math.sin(t / 10) / 4 : 0,
      0.1
    )
    group.current.rotation.z = THREE.MathUtils.lerp(
      group.current.rotation.z,
      open ? Math.sin(t / 10) / 10 : 0,
      0.1
    )
    group.current.position.y = THREE.MathUtils.lerp(
      group.current.position.y,
      open ? (-2 + Math.sin(t)) / 3 : -4.3,
      0.1
    )

    // group.current.position.y = THREE.MathUtils.lerp(
    //   group.current.position.y,
    //   open ? (-20 + Math.sin(t)) * 0.1 : -4.3,
    //   0.1
    // )
  })

  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards
  return (
    <group
      ref={group}
      {...props}
      onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
      onPointerOut={(e) => setHovered(false)}
      dispose={null}
    >
      <three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
        <group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            material={materials.aluminium}
            geometry={nodes["Cube008"].geometry}
          />
          <mesh
            material={materials["matte.001"]}
            geometry={nodes["Cube008_1"].geometry}
          />
          <mesh
            material={new THREE.MeshBasicMaterial({ color: "black" })}
            geometry={nodes["Cube008_2"].geometry}
          />
        </group>

        {/* <ScreenPortal
          args={[8, 5, 0.1]}
          position={[0.02, 3.07, -0.13]}
          rotation-x={(Math.PI / 2, 0, 0)}
        /> */}

        <Html
          transform
          wrapperClass="htmlScreen"
          // distanceFactor={frameDebug.distanceFactor}
          distanceFactor={3.25}
          // position={[frameDebug.x, frameDebug.y, frameDebug.z]}
          position={[0.02, 3.07, -0.13]}
          rotation-x={(Math.PI / 2, 0, 0)}
          style={{
            display: open ? "inherit" : "none",
          }}
        >
          <iframe src="https://kiiyuru-portal.vercel.app/" />
        </Html>
      </three.group>
      <mesh
        material={materials.keys}
        geometry={nodes.keyboard.geometry}
        position={[1.79, 0, 3.45]}
      />
      <group position={[0, -0.1, 3.39]}>
        <mesh
          material={materials.aluminium}
          geometry={nodes["Cube002"].geometry}
        />
        <mesh
          material={materials.trackpad}
          geometry={nodes["Cube002_1"].geometry}
        />
      </group>
      <mesh
        material={materials.touchbar}
        geometry={nodes.touchbar.geometry}
        position={[0, -0.03, 1.2]}
      />
    </group>
  )
}
